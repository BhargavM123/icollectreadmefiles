/*
	Author: Ankit Rastogi, IIIT Gwalior
	"When we hit our lowest point, we are opened to the greatest change."
*/
 
#pragma GCC optimize("Ofast")
#pragma GCC optimization("unroll-loops")

#include <iostream>
#include<bits/stdc++.h>
using namespace std; 

#define ll long long
#define F first
#define S second
#define all(x) x.begin(), x.end()
#define sortall(x) sort(all(x))
#define reverseall(x) reverse(all(x))
#define pb push_back
#define mod 1000000007
#define inf (ll)1e18
#define yes "YES"
#define no "NO"
#define endl '\n'

typedef pair<ll, ll>	pll;
typedef vector<ll>		vl;
typedef vector<pll>		vpl;
typedef vector<vl>		vvl;
typedef vector<string>  vs;

void printvl(vl& a){for(auto i:a)cout<<i<<" ";cout<<endl;}
// struct comparator {
//      bool operator()(pll a,pll b) {
//      return a.S > b.S;
//     }
// };
// priority_queue <pll, vector<pll>, comparator> pq;
// priority_queue <ll, vector<ll>, greater<ll> > pq;  //min-heap
// vl fact(10001, 1);
// void set_fact(){for(ll i = 1; i <= 1001; i++){fact[i] = fact[i - 1] * i;fact[i] %= mod;}}
// ll power(ll x, ll p){if(p == 0) return 1;ll ans = power(x, p / 2);ans *= ans;ans %= mod;if(p % 2){    ans *= x;    ans %= mod;}return ans;}
// ll nCk(ll n, ll k){ll ans = fact[n];ll inverse = power(fact[k], mod - 2);
// ans *= inverse;ans %= mod;inverse = power(fact[n - k], mod - 2);ans *= inverse;ans %= mod;return ans;}

void solve(){
    ll n;
    cin >> n;
    vl arr(n);
    for(auto &x: arr)cin >> x;
    vector<int> dp(n, 1), pre(n);
    pre[0] = 1;
    for(int i = 1; i < n; ++i){
        int curr = 0;
        for(int j = i - 1; j >= max(0, i - 500); j--){
            if((j ^ arr[i]) > (i ^ arr[j])){
                curr = max(curr, dp[j]);
            }
        }
        dp[i] += curr;
        pre[i] = max(pre[i - 1], dp[i]);
    }
    cout << pre[n - 1] << endl;
}

int main() {
    std::ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    ll t;
    cin>>t;
    while(t--)solve();
    // int tc=1;
    // cin >> tc;
    // for(int t1 = 1; t1 <= tc; t1++){
    //     cout << "Case #"<< t1 <<": ";
    //     solve();
    // }
	return 0;
}
